// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	model "pay-bills/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newGeneralLedger(db *gorm.DB, opts ...gen.DOOption) generalLedger {
	_generalLedger := generalLedger{}

	_generalLedger.generalLedgerDo.UseDB(db, opts...)
	_generalLedger.generalLedgerDo.UseModel(&model.GeneralLedger{})

	tableName := _generalLedger.generalLedgerDo.TableName()
	_generalLedger.ALL = field.NewAsterisk(tableName)
	_generalLedger.ID = field.NewUint(tableName, "id")
	_generalLedger.CreatedAt = field.NewTime(tableName, "created_at")
	_generalLedger.UpdatedAt = field.NewTime(tableName, "updated_at")
	_generalLedger.ServiceId = field.NewUint(tableName, "service_id")
	_generalLedger.Balance = field.NewFloat64(tableName, "balance")

	_generalLedger.fillFieldMap()

	return _generalLedger
}

type generalLedger struct {
	generalLedgerDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	ServiceId field.Uint
	Balance   field.Float64

	fieldMap map[string]field.Expr
}

func (g generalLedger) Table(newTableName string) *generalLedger {
	g.generalLedgerDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g generalLedger) As(alias string) *generalLedger {
	g.generalLedgerDo.DO = *(g.generalLedgerDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *generalLedger) updateTableName(table string) *generalLedger {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.ServiceId = field.NewUint(table, "service_id")
	g.Balance = field.NewFloat64(table, "balance")

	g.fillFieldMap()

	return g
}

func (g *generalLedger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *generalLedger) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["service_id"] = g.ServiceId
	g.fieldMap["balance"] = g.Balance
}

func (g generalLedger) clone(db *gorm.DB) generalLedger {
	g.generalLedgerDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g generalLedger) replaceDB(db *gorm.DB) generalLedger {
	g.generalLedgerDo.ReplaceDB(db)
	return g
}

type generalLedgerDo struct{ gen.DO }

type IGeneralLedgerDo interface {
	gen.SubQuery
	Debug() IGeneralLedgerDo
	WithContext(ctx context.Context) IGeneralLedgerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGeneralLedgerDo
	WriteDB() IGeneralLedgerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGeneralLedgerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGeneralLedgerDo
	Not(conds ...gen.Condition) IGeneralLedgerDo
	Or(conds ...gen.Condition) IGeneralLedgerDo
	Select(conds ...field.Expr) IGeneralLedgerDo
	Where(conds ...gen.Condition) IGeneralLedgerDo
	Order(conds ...field.Expr) IGeneralLedgerDo
	Distinct(cols ...field.Expr) IGeneralLedgerDo
	Omit(cols ...field.Expr) IGeneralLedgerDo
	Join(table schema.Tabler, on ...field.Expr) IGeneralLedgerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGeneralLedgerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGeneralLedgerDo
	Group(cols ...field.Expr) IGeneralLedgerDo
	Having(conds ...gen.Condition) IGeneralLedgerDo
	Limit(limit int) IGeneralLedgerDo
	Offset(offset int) IGeneralLedgerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGeneralLedgerDo
	Unscoped() IGeneralLedgerDo
	Create(values ...*model.GeneralLedger) error
	CreateInBatches(values []*model.GeneralLedger, batchSize int) error
	Save(values ...*model.GeneralLedger) error
	First() (*model.GeneralLedger, error)
	Take() (*model.GeneralLedger, error)
	Last() (*model.GeneralLedger, error)
	Find() ([]*model.GeneralLedger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GeneralLedger, err error)
	FindInBatches(result *[]*model.GeneralLedger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GeneralLedger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGeneralLedgerDo
	Assign(attrs ...field.AssignExpr) IGeneralLedgerDo
	Joins(fields ...field.RelationField) IGeneralLedgerDo
	Preload(fields ...field.RelationField) IGeneralLedgerDo
	FirstOrInit() (*model.GeneralLedger, error)
	FirstOrCreate() (*model.GeneralLedger, error)
	FindByPage(offset int, limit int) (result []*model.GeneralLedger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGeneralLedgerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g generalLedgerDo) Debug() IGeneralLedgerDo {
	return g.withDO(g.DO.Debug())
}

func (g generalLedgerDo) WithContext(ctx context.Context) IGeneralLedgerDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g generalLedgerDo) ReadDB() IGeneralLedgerDo {
	return g.Clauses(dbresolver.Read)
}

func (g generalLedgerDo) WriteDB() IGeneralLedgerDo {
	return g.Clauses(dbresolver.Write)
}

func (g generalLedgerDo) Session(config *gorm.Session) IGeneralLedgerDo {
	return g.withDO(g.DO.Session(config))
}

func (g generalLedgerDo) Clauses(conds ...clause.Expression) IGeneralLedgerDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g generalLedgerDo) Returning(value interface{}, columns ...string) IGeneralLedgerDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g generalLedgerDo) Not(conds ...gen.Condition) IGeneralLedgerDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g generalLedgerDo) Or(conds ...gen.Condition) IGeneralLedgerDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g generalLedgerDo) Select(conds ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g generalLedgerDo) Where(conds ...gen.Condition) IGeneralLedgerDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g generalLedgerDo) Order(conds ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g generalLedgerDo) Distinct(cols ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g generalLedgerDo) Omit(cols ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g generalLedgerDo) Join(table schema.Tabler, on ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g generalLedgerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g generalLedgerDo) RightJoin(table schema.Tabler, on ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g generalLedgerDo) Group(cols ...field.Expr) IGeneralLedgerDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g generalLedgerDo) Having(conds ...gen.Condition) IGeneralLedgerDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g generalLedgerDo) Limit(limit int) IGeneralLedgerDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g generalLedgerDo) Offset(offset int) IGeneralLedgerDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g generalLedgerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGeneralLedgerDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g generalLedgerDo) Unscoped() IGeneralLedgerDo {
	return g.withDO(g.DO.Unscoped())
}

func (g generalLedgerDo) Create(values ...*model.GeneralLedger) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g generalLedgerDo) CreateInBatches(values []*model.GeneralLedger, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g generalLedgerDo) Save(values ...*model.GeneralLedger) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g generalLedgerDo) First() (*model.GeneralLedger, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeneralLedger), nil
	}
}

func (g generalLedgerDo) Take() (*model.GeneralLedger, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeneralLedger), nil
	}
}

func (g generalLedgerDo) Last() (*model.GeneralLedger, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeneralLedger), nil
	}
}

func (g generalLedgerDo) Find() ([]*model.GeneralLedger, error) {
	result, err := g.DO.Find()
	return result.([]*model.GeneralLedger), err
}

func (g generalLedgerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GeneralLedger, err error) {
	buf := make([]*model.GeneralLedger, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g generalLedgerDo) FindInBatches(result *[]*model.GeneralLedger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g generalLedgerDo) Attrs(attrs ...field.AssignExpr) IGeneralLedgerDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g generalLedgerDo) Assign(attrs ...field.AssignExpr) IGeneralLedgerDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g generalLedgerDo) Joins(fields ...field.RelationField) IGeneralLedgerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g generalLedgerDo) Preload(fields ...field.RelationField) IGeneralLedgerDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g generalLedgerDo) FirstOrInit() (*model.GeneralLedger, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeneralLedger), nil
	}
}

func (g generalLedgerDo) FirstOrCreate() (*model.GeneralLedger, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeneralLedger), nil
	}
}

func (g generalLedgerDo) FindByPage(offset int, limit int) (result []*model.GeneralLedger, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g generalLedgerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g generalLedgerDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g generalLedgerDo) Delete(models ...*model.GeneralLedger) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *generalLedgerDo) withDO(do gen.Dao) *generalLedgerDo {
	g.DO = *do.(*gen.DO)
	return g
}
