// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	model "pay-bills/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newService(db *gorm.DB, opts ...gen.DOOption) service {
	_service := service{}

	_service.serviceDo.UseDB(db, opts...)
	_service.serviceDo.UseModel(&model.Service{})

	tableName := _service.serviceDo.TableName()
	_service.ALL = field.NewAsterisk(tableName)
	_service.ID = field.NewUint(tableName, "id")
	_service.CreatedAt = field.NewTime(tableName, "created_at")
	_service.UpdatedAt = field.NewTime(tableName, "updated_at")
	_service.ProviderId = field.NewUint(tableName, "provider_id")
	_service.Slug = field.NewString(tableName, "slug")
	_service.Name = field.NewString(tableName, "name")
	_service.MenuName = field.NewString(tableName, "menu_name")
	_service.IsAvailable = field.NewBool(tableName, "is_available")
	_service.Description = field.NewString(tableName, "description")
	_service.Menu = field.NewBool(tableName, "menu")
	_service.Internal = field.NewBool(tableName, "internal")
	_service.Provider = serviceBelongsToProvider{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Provider", "model.ServiceProvider"),
	}

	_service.fillFieldMap()

	return _service
}

type service struct {
	serviceDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	ProviderId  field.Uint
	Slug        field.String
	Name        field.String
	MenuName    field.String
	IsAvailable field.Bool
	Description field.String
	Menu        field.Bool
	Internal    field.Bool
	Provider    serviceBelongsToProvider

	fieldMap map[string]field.Expr
}

func (s service) Table(newTableName string) *service {
	s.serviceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s service) As(alias string) *service {
	s.serviceDo.DO = *(s.serviceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *service) updateTableName(table string) *service {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.ProviderId = field.NewUint(table, "provider_id")
	s.Slug = field.NewString(table, "slug")
	s.Name = field.NewString(table, "name")
	s.MenuName = field.NewString(table, "menu_name")
	s.IsAvailable = field.NewBool(table, "is_available")
	s.Description = field.NewString(table, "description")
	s.Menu = field.NewBool(table, "menu")
	s.Internal = field.NewBool(table, "internal")

	s.fillFieldMap()

	return s
}

func (s *service) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *service) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["provider_id"] = s.ProviderId
	s.fieldMap["slug"] = s.Slug
	s.fieldMap["name"] = s.Name
	s.fieldMap["menu_name"] = s.MenuName
	s.fieldMap["is_available"] = s.IsAvailable
	s.fieldMap["description"] = s.Description
	s.fieldMap["menu"] = s.Menu
	s.fieldMap["internal"] = s.Internal

}

func (s service) clone(db *gorm.DB) service {
	s.serviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s service) replaceDB(db *gorm.DB) service {
	s.serviceDo.ReplaceDB(db)
	return s
}

type serviceBelongsToProvider struct {
	db *gorm.DB

	field.RelationField
}

func (a serviceBelongsToProvider) Where(conds ...field.Expr) *serviceBelongsToProvider {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serviceBelongsToProvider) WithContext(ctx context.Context) *serviceBelongsToProvider {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serviceBelongsToProvider) Session(session *gorm.Session) *serviceBelongsToProvider {
	a.db = a.db.Session(session)
	return &a
}

func (a serviceBelongsToProvider) Model(m *model.Service) *serviceBelongsToProviderTx {
	return &serviceBelongsToProviderTx{a.db.Model(m).Association(a.Name())}
}

type serviceBelongsToProviderTx struct{ tx *gorm.Association }

func (a serviceBelongsToProviderTx) Find() (result *model.ServiceProvider, err error) {
	return result, a.tx.Find(&result)
}

func (a serviceBelongsToProviderTx) Append(values ...*model.ServiceProvider) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serviceBelongsToProviderTx) Replace(values ...*model.ServiceProvider) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serviceBelongsToProviderTx) Delete(values ...*model.ServiceProvider) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serviceBelongsToProviderTx) Clear() error {
	return a.tx.Clear()
}

func (a serviceBelongsToProviderTx) Count() int64 {
	return a.tx.Count()
}

type serviceDo struct{ gen.DO }

type IServiceDo interface {
	gen.SubQuery
	Debug() IServiceDo
	WithContext(ctx context.Context) IServiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceDo
	WriteDB() IServiceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceDo
	Not(conds ...gen.Condition) IServiceDo
	Or(conds ...gen.Condition) IServiceDo
	Select(conds ...field.Expr) IServiceDo
	Where(conds ...gen.Condition) IServiceDo
	Order(conds ...field.Expr) IServiceDo
	Distinct(cols ...field.Expr) IServiceDo
	Omit(cols ...field.Expr) IServiceDo
	Join(table schema.Tabler, on ...field.Expr) IServiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceDo
	Group(cols ...field.Expr) IServiceDo
	Having(conds ...gen.Condition) IServiceDo
	Limit(limit int) IServiceDo
	Offset(offset int) IServiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceDo
	Unscoped() IServiceDo
	Create(values ...*model.Service) error
	CreateInBatches(values []*model.Service, batchSize int) error
	Save(values ...*model.Service) error
	First() (*model.Service, error)
	Take() (*model.Service, error)
	Last() (*model.Service, error)
	Find() ([]*model.Service, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Service, err error)
	FindInBatches(result *[]*model.Service, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Service) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceDo
	Assign(attrs ...field.AssignExpr) IServiceDo
	Joins(fields ...field.RelationField) IServiceDo
	Preload(fields ...field.RelationField) IServiceDo
	FirstOrInit() (*model.Service, error)
	FirstOrCreate() (*model.Service, error)
	FindByPage(offset int, limit int) (result []*model.Service, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceDo) Debug() IServiceDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceDo) WithContext(ctx context.Context) IServiceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceDo) ReadDB() IServiceDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceDo) WriteDB() IServiceDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceDo) Session(config *gorm.Session) IServiceDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceDo) Clauses(conds ...clause.Expression) IServiceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceDo) Returning(value interface{}, columns ...string) IServiceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceDo) Not(conds ...gen.Condition) IServiceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceDo) Or(conds ...gen.Condition) IServiceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceDo) Select(conds ...field.Expr) IServiceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceDo) Where(conds ...gen.Condition) IServiceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceDo) Order(conds ...field.Expr) IServiceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceDo) Distinct(cols ...field.Expr) IServiceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceDo) Omit(cols ...field.Expr) IServiceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceDo) Join(table schema.Tabler, on ...field.Expr) IServiceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceDo) Group(cols ...field.Expr) IServiceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceDo) Having(conds ...gen.Condition) IServiceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceDo) Limit(limit int) IServiceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceDo) Offset(offset int) IServiceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceDo) Unscoped() IServiceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceDo) Create(values ...*model.Service) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceDo) CreateInBatches(values []*model.Service, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceDo) Save(values ...*model.Service) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceDo) First() (*model.Service, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Service), nil
	}
}

func (s serviceDo) Take() (*model.Service, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Service), nil
	}
}

func (s serviceDo) Last() (*model.Service, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Service), nil
	}
}

func (s serviceDo) Find() ([]*model.Service, error) {
	result, err := s.DO.Find()
	return result.([]*model.Service), err
}

func (s serviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Service, err error) {
	buf := make([]*model.Service, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceDo) FindInBatches(result *[]*model.Service, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceDo) Attrs(attrs ...field.AssignExpr) IServiceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceDo) Assign(attrs ...field.AssignExpr) IServiceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceDo) Joins(fields ...field.RelationField) IServiceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceDo) Preload(fields ...field.RelationField) IServiceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceDo) FirstOrInit() (*model.Service, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Service), nil
	}
}

func (s serviceDo) FirstOrCreate() (*model.Service, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Service), nil
	}
}

func (s serviceDo) FindByPage(offset int, limit int) (result []*model.Service, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceDo) Delete(models ...*model.Service) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceDo) withDO(do gen.Dao) *serviceDo {
	s.DO = *do.(*gen.DO)
	return s
}
