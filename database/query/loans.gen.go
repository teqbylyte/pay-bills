// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"martpay/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLoan(db *gorm.DB, opts ...gen.DOOption) loan {
	_loan := loan{}

	_loan.loanDo.UseDB(db, opts...)
	_loan.loanDo.UseModel(&models.Loan{})

	tableName := _loan.loanDo.TableName()
	_loan.ALL = field.NewAsterisk(tableName)
	_loan.ID = field.NewUint(tableName, "id")
	_loan.CreatedAt = field.NewTime(tableName, "created_at")
	_loan.UpdatedAt = field.NewTime(tableName, "updated_at")
	_loan.UserId = field.NewUint(tableName, "user_id")
	_loan.TransactionId = field.NewUint(tableName, "transaction_id")
	_loan.Amount = field.NewFloat64(tableName, "amount")
	_loan.Charge = field.NewFloat64(tableName, "charge")
	_loan.AmountOwed = field.NewFloat64(tableName, "amount_owed")
	_loan.Items = field.NewField(tableName, "items")
	_loan.Status = field.NewString(tableName, "status")
	_loan.Info = field.NewString(tableName, "info")
	_loan.DeclineReason = field.NewString(tableName, "decline_reason")
	_loan.ApprovedBy = field.NewUint(tableName, "approved_by")
	_loan.ConfirmedBy = field.NewUint(tableName, "confirmed_by")
	_loan.DeclinedBy = field.NewUint(tableName, "declined_by")

	_loan.fillFieldMap()

	return _loan
}

type loan struct {
	loanDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	UserId        field.Uint
	TransactionId field.Uint
	Amount        field.Float64
	Charge        field.Float64
	AmountOwed    field.Float64
	Items         field.Field
	Status        field.String
	Info          field.String
	DeclineReason field.String
	ApprovedBy    field.Uint
	ConfirmedBy   field.Uint
	DeclinedBy    field.Uint

	fieldMap map[string]field.Expr
}

func (l loan) Table(newTableName string) *loan {
	l.loanDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loan) As(alias string) *loan {
	l.loanDo.DO = *(l.loanDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loan) updateTableName(table string) *loan {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.UserId = field.NewUint(table, "user_id")
	l.TransactionId = field.NewUint(table, "transaction_id")
	l.Amount = field.NewFloat64(table, "amount")
	l.Charge = field.NewFloat64(table, "charge")
	l.AmountOwed = field.NewFloat64(table, "amount_owed")
	l.Items = field.NewField(table, "items")
	l.Status = field.NewString(table, "status")
	l.Info = field.NewString(table, "info")
	l.DeclineReason = field.NewString(table, "decline_reason")
	l.ApprovedBy = field.NewUint(table, "approved_by")
	l.ConfirmedBy = field.NewUint(table, "confirmed_by")
	l.DeclinedBy = field.NewUint(table, "declined_by")

	l.fillFieldMap()

	return l
}

func (l *loan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loan) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["user_id"] = l.UserId
	l.fieldMap["transaction_id"] = l.TransactionId
	l.fieldMap["amount"] = l.Amount
	l.fieldMap["charge"] = l.Charge
	l.fieldMap["amount_owed"] = l.AmountOwed
	l.fieldMap["items"] = l.Items
	l.fieldMap["status"] = l.Status
	l.fieldMap["info"] = l.Info
	l.fieldMap["decline_reason"] = l.DeclineReason
	l.fieldMap["approved_by"] = l.ApprovedBy
	l.fieldMap["confirmed_by"] = l.ConfirmedBy
	l.fieldMap["declined_by"] = l.DeclinedBy
}

func (l loan) clone(db *gorm.DB) loan {
	l.loanDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loan) replaceDB(db *gorm.DB) loan {
	l.loanDo.ReplaceDB(db)
	return l
}

type loanDo struct{ gen.DO }

type ILoanDo interface {
	gen.SubQuery
	Debug() ILoanDo
	WithContext(ctx context.Context) ILoanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoanDo
	WriteDB() ILoanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoanDo
	Not(conds ...gen.Condition) ILoanDo
	Or(conds ...gen.Condition) ILoanDo
	Select(conds ...field.Expr) ILoanDo
	Where(conds ...gen.Condition) ILoanDo
	Order(conds ...field.Expr) ILoanDo
	Distinct(cols ...field.Expr) ILoanDo
	Omit(cols ...field.Expr) ILoanDo
	Join(table schema.Tabler, on ...field.Expr) ILoanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoanDo
	Group(cols ...field.Expr) ILoanDo
	Having(conds ...gen.Condition) ILoanDo
	Limit(limit int) ILoanDo
	Offset(offset int) ILoanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoanDo
	Unscoped() ILoanDo
	Create(values ...*models.Loan) error
	CreateInBatches(values []*models.Loan, batchSize int) error
	Save(values ...*models.Loan) error
	First() (*models.Loan, error)
	Take() (*models.Loan, error)
	Last() (*models.Loan, error)
	Find() ([]*models.Loan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Loan, err error)
	FindInBatches(result *[]*models.Loan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Loan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoanDo
	Assign(attrs ...field.AssignExpr) ILoanDo
	Joins(fields ...field.RelationField) ILoanDo
	Preload(fields ...field.RelationField) ILoanDo
	FirstOrInit() (*models.Loan, error)
	FirstOrCreate() (*models.Loan, error)
	FindByPage(offset int, limit int) (result []*models.Loan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l loanDo) Debug() ILoanDo {
	return l.withDO(l.DO.Debug())
}

func (l loanDo) WithContext(ctx context.Context) ILoanDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loanDo) ReadDB() ILoanDo {
	return l.Clauses(dbresolver.Read)
}

func (l loanDo) WriteDB() ILoanDo {
	return l.Clauses(dbresolver.Write)
}

func (l loanDo) Session(config *gorm.Session) ILoanDo {
	return l.withDO(l.DO.Session(config))
}

func (l loanDo) Clauses(conds ...clause.Expression) ILoanDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loanDo) Returning(value interface{}, columns ...string) ILoanDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loanDo) Not(conds ...gen.Condition) ILoanDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loanDo) Or(conds ...gen.Condition) ILoanDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loanDo) Select(conds ...field.Expr) ILoanDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loanDo) Where(conds ...gen.Condition) ILoanDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loanDo) Order(conds ...field.Expr) ILoanDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loanDo) Distinct(cols ...field.Expr) ILoanDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loanDo) Omit(cols ...field.Expr) ILoanDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loanDo) Join(table schema.Tabler, on ...field.Expr) ILoanDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoanDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loanDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoanDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loanDo) Group(cols ...field.Expr) ILoanDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loanDo) Having(conds ...gen.Condition) ILoanDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loanDo) Limit(limit int) ILoanDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loanDo) Offset(offset int) ILoanDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoanDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loanDo) Unscoped() ILoanDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loanDo) Create(values ...*models.Loan) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loanDo) CreateInBatches(values []*models.Loan, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loanDo) Save(values ...*models.Loan) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loanDo) First() (*models.Loan, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Loan), nil
	}
}

func (l loanDo) Take() (*models.Loan, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Loan), nil
	}
}

func (l loanDo) Last() (*models.Loan, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Loan), nil
	}
}

func (l loanDo) Find() ([]*models.Loan, error) {
	result, err := l.DO.Find()
	return result.([]*models.Loan), err
}

func (l loanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Loan, err error) {
	buf := make([]*models.Loan, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loanDo) FindInBatches(result *[]*models.Loan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loanDo) Attrs(attrs ...field.AssignExpr) ILoanDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loanDo) Assign(attrs ...field.AssignExpr) ILoanDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loanDo) Joins(fields ...field.RelationField) ILoanDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loanDo) Preload(fields ...field.RelationField) ILoanDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loanDo) FirstOrInit() (*models.Loan, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Loan), nil
	}
}

func (l loanDo) FirstOrCreate() (*models.Loan, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Loan), nil
	}
}

func (l loanDo) FindByPage(offset int, limit int) (result []*models.Loan, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loanDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loanDo) Delete(models ...*models.Loan) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loanDo) withDO(do gen.Dao) *loanDo {
	l.DO = *do.(*gen.DO)
	return l
}
