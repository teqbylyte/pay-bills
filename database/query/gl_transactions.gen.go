// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"martpay/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newGlTransaction(db *gorm.DB, opts ...gen.DOOption) glTransaction {
	_glTransaction := glTransaction{}

	_glTransaction.glTransactionDo.UseDB(db, opts...)
	_glTransaction.glTransactionDo.UseModel(&models.GlTransaction{})

	tableName := _glTransaction.glTransactionDo.TableName()
	_glTransaction.ALL = field.NewAsterisk(tableName)
	_glTransaction.FromUserId = field.NewUint(tableName, "from_user_id")
	_glTransaction.GlId = field.NewUint(tableName, "gl_id")
	_glTransaction.Amount = field.NewFloat64(tableName, "amount")
	_glTransaction.PrevBalance = field.NewFloat64(tableName, "prev_balance")
	_glTransaction.NewBalance = field.NewFloat64(tableName, "new_balance")
	_glTransaction.Type = field.NewString(tableName, "type")
	_glTransaction.Info = field.NewString(tableName, "info")

	_glTransaction.fillFieldMap()

	return _glTransaction
}

type glTransaction struct {
	glTransactionDo

	ALL         field.Asterisk
	FromUserId  field.Uint
	GlId        field.Uint
	Amount      field.Float64
	PrevBalance field.Float64
	NewBalance  field.Float64
	Type        field.String
	Info        field.String

	fieldMap map[string]field.Expr
}

func (g glTransaction) Table(newTableName string) *glTransaction {
	g.glTransactionDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g glTransaction) As(alias string) *glTransaction {
	g.glTransactionDo.DO = *(g.glTransactionDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *glTransaction) updateTableName(table string) *glTransaction {
	g.ALL = field.NewAsterisk(table)
	g.FromUserId = field.NewUint(table, "from_user_id")
	g.GlId = field.NewUint(table, "gl_id")
	g.Amount = field.NewFloat64(table, "amount")
	g.PrevBalance = field.NewFloat64(table, "prev_balance")
	g.NewBalance = field.NewFloat64(table, "new_balance")
	g.Type = field.NewString(table, "type")
	g.Info = field.NewString(table, "info")

	g.fillFieldMap()

	return g
}

func (g *glTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *glTransaction) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["from_user_id"] = g.FromUserId
	g.fieldMap["gl_id"] = g.GlId
	g.fieldMap["amount"] = g.Amount
	g.fieldMap["prev_balance"] = g.PrevBalance
	g.fieldMap["new_balance"] = g.NewBalance
	g.fieldMap["type"] = g.Type
	g.fieldMap["info"] = g.Info
}

func (g glTransaction) clone(db *gorm.DB) glTransaction {
	g.glTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g glTransaction) replaceDB(db *gorm.DB) glTransaction {
	g.glTransactionDo.ReplaceDB(db)
	return g
}

type glTransactionDo struct{ gen.DO }

type IGlTransactionDo interface {
	gen.SubQuery
	Debug() IGlTransactionDo
	WithContext(ctx context.Context) IGlTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlTransactionDo
	WriteDB() IGlTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlTransactionDo
	Not(conds ...gen.Condition) IGlTransactionDo
	Or(conds ...gen.Condition) IGlTransactionDo
	Select(conds ...field.Expr) IGlTransactionDo
	Where(conds ...gen.Condition) IGlTransactionDo
	Order(conds ...field.Expr) IGlTransactionDo
	Distinct(cols ...field.Expr) IGlTransactionDo
	Omit(cols ...field.Expr) IGlTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IGlTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlTransactionDo
	Group(cols ...field.Expr) IGlTransactionDo
	Having(conds ...gen.Condition) IGlTransactionDo
	Limit(limit int) IGlTransactionDo
	Offset(offset int) IGlTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlTransactionDo
	Unscoped() IGlTransactionDo
	Create(values ...*models.GlTransaction) error
	CreateInBatches(values []*models.GlTransaction, batchSize int) error
	Save(values ...*models.GlTransaction) error
	First() (*models.GlTransaction, error)
	Take() (*models.GlTransaction, error)
	Last() (*models.GlTransaction, error)
	Find() ([]*models.GlTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GlTransaction, err error)
	FindInBatches(result *[]*models.GlTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.GlTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlTransactionDo
	Assign(attrs ...field.AssignExpr) IGlTransactionDo
	Joins(fields ...field.RelationField) IGlTransactionDo
	Preload(fields ...field.RelationField) IGlTransactionDo
	FirstOrInit() (*models.GlTransaction, error)
	FirstOrCreate() (*models.GlTransaction, error)
	FindByPage(offset int, limit int) (result []*models.GlTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g glTransactionDo) Debug() IGlTransactionDo {
	return g.withDO(g.DO.Debug())
}

func (g glTransactionDo) WithContext(ctx context.Context) IGlTransactionDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g glTransactionDo) ReadDB() IGlTransactionDo {
	return g.Clauses(dbresolver.Read)
}

func (g glTransactionDo) WriteDB() IGlTransactionDo {
	return g.Clauses(dbresolver.Write)
}

func (g glTransactionDo) Session(config *gorm.Session) IGlTransactionDo {
	return g.withDO(g.DO.Session(config))
}

func (g glTransactionDo) Clauses(conds ...clause.Expression) IGlTransactionDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g glTransactionDo) Returning(value interface{}, columns ...string) IGlTransactionDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g glTransactionDo) Not(conds ...gen.Condition) IGlTransactionDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g glTransactionDo) Or(conds ...gen.Condition) IGlTransactionDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g glTransactionDo) Select(conds ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g glTransactionDo) Where(conds ...gen.Condition) IGlTransactionDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g glTransactionDo) Order(conds ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g glTransactionDo) Distinct(cols ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g glTransactionDo) Omit(cols ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g glTransactionDo) Join(table schema.Tabler, on ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g glTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g glTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g glTransactionDo) Group(cols ...field.Expr) IGlTransactionDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g glTransactionDo) Having(conds ...gen.Condition) IGlTransactionDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g glTransactionDo) Limit(limit int) IGlTransactionDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g glTransactionDo) Offset(offset int) IGlTransactionDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g glTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlTransactionDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g glTransactionDo) Unscoped() IGlTransactionDo {
	return g.withDO(g.DO.Unscoped())
}

func (g glTransactionDo) Create(values ...*models.GlTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g glTransactionDo) CreateInBatches(values []*models.GlTransaction, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g glTransactionDo) Save(values ...*models.GlTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g glTransactionDo) First() (*models.GlTransaction, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.GlTransaction), nil
	}
}

func (g glTransactionDo) Take() (*models.GlTransaction, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.GlTransaction), nil
	}
}

func (g glTransactionDo) Last() (*models.GlTransaction, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.GlTransaction), nil
	}
}

func (g glTransactionDo) Find() ([]*models.GlTransaction, error) {
	result, err := g.DO.Find()
	return result.([]*models.GlTransaction), err
}

func (g glTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.GlTransaction, err error) {
	buf := make([]*models.GlTransaction, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g glTransactionDo) FindInBatches(result *[]*models.GlTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g glTransactionDo) Attrs(attrs ...field.AssignExpr) IGlTransactionDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g glTransactionDo) Assign(attrs ...field.AssignExpr) IGlTransactionDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g glTransactionDo) Joins(fields ...field.RelationField) IGlTransactionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g glTransactionDo) Preload(fields ...field.RelationField) IGlTransactionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g glTransactionDo) FirstOrInit() (*models.GlTransaction, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.GlTransaction), nil
	}
}

func (g glTransactionDo) FirstOrCreate() (*models.GlTransaction, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.GlTransaction), nil
	}
}

func (g glTransactionDo) FindByPage(offset int, limit int) (result []*models.GlTransaction, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g glTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g glTransactionDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g glTransactionDo) Delete(models ...*models.GlTransaction) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *glTransactionDo) withDO(do gen.Dao) *glTransactionDo {
	g.DO = *do.(*gen.DO)
	return g
}
