// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	model "martpay/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFee(db *gorm.DB, opts ...gen.DOOption) fee {
	_fee := fee{}

	_fee.feeDo.UseDB(db, opts...)
	_fee.feeDo.UseModel(&model.Fee{})

	tableName := _fee.feeDo.TableName()
	_fee.ALL = field.NewAsterisk(tableName)
	_fee.ID = field.NewUint(tableName, "id")
	_fee.CreatedAt = field.NewTime(tableName, "created_at")
	_fee.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fee.GroupId = field.NewUint(tableName, "group_id")
	_fee.ServiceId = field.NewString(tableName, "service_id")
	_fee.Title = field.NewString(tableName, "title")
	_fee.Type = field.NewString(tableName, "type")
	_fee.Amount = field.NewFloat64(tableName, "amount")
	_fee.AmountType = field.NewString(tableName, "amount_type")
	_fee.Cap = field.NewFloat64(tableName, "cap")
	_fee.Info = field.NewString(tableName, "info")
	_fee.Config = field.NewField(tableName, "config")
	_fee.Structure = field.NewField(tableName, "structure")

	_fee.fillFieldMap()

	return _fee
}

type fee struct {
	feeDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	GroupId    field.Uint
	ServiceId  field.String
	Title      field.String
	Type       field.String
	Amount     field.Float64
	AmountType field.String
	Cap        field.Float64
	Info       field.String
	Config     field.Field
	Structure  field.Field

	fieldMap map[string]field.Expr
}

func (f fee) Table(newTableName string) *fee {
	f.feeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fee) As(alias string) *fee {
	f.feeDo.DO = *(f.feeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fee) updateTableName(table string) *fee {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.GroupId = field.NewUint(table, "group_id")
	f.ServiceId = field.NewString(table, "service_id")
	f.Title = field.NewString(table, "title")
	f.Type = field.NewString(table, "type")
	f.Amount = field.NewFloat64(table, "amount")
	f.AmountType = field.NewString(table, "amount_type")
	f.Cap = field.NewFloat64(table, "cap")
	f.Info = field.NewString(table, "info")
	f.Config = field.NewField(table, "config")
	f.Structure = field.NewField(table, "structure")

	f.fillFieldMap()

	return f
}

func (f *fee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fee) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["group_id"] = f.GroupId
	f.fieldMap["service_id"] = f.ServiceId
	f.fieldMap["title"] = f.Title
	f.fieldMap["type"] = f.Type
	f.fieldMap["amount"] = f.Amount
	f.fieldMap["amount_type"] = f.AmountType
	f.fieldMap["cap"] = f.Cap
	f.fieldMap["info"] = f.Info
	f.fieldMap["config"] = f.Config
	f.fieldMap["structure"] = f.Structure
}

func (f fee) clone(db *gorm.DB) fee {
	f.feeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fee) replaceDB(db *gorm.DB) fee {
	f.feeDo.ReplaceDB(db)
	return f
}

type feeDo struct{ gen.DO }

type IFeeDo interface {
	gen.SubQuery
	Debug() IFeeDo
	WithContext(ctx context.Context) IFeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFeeDo
	WriteDB() IFeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFeeDo
	Not(conds ...gen.Condition) IFeeDo
	Or(conds ...gen.Condition) IFeeDo
	Select(conds ...field.Expr) IFeeDo
	Where(conds ...gen.Condition) IFeeDo
	Order(conds ...field.Expr) IFeeDo
	Distinct(cols ...field.Expr) IFeeDo
	Omit(cols ...field.Expr) IFeeDo
	Join(table schema.Tabler, on ...field.Expr) IFeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFeeDo
	Group(cols ...field.Expr) IFeeDo
	Having(conds ...gen.Condition) IFeeDo
	Limit(limit int) IFeeDo
	Offset(offset int) IFeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFeeDo
	Unscoped() IFeeDo
	Create(values ...*model.Fee) error
	CreateInBatches(values []*model.Fee, batchSize int) error
	Save(values ...*model.Fee) error
	First() (*model.Fee, error)
	Take() (*model.Fee, error)
	Last() (*model.Fee, error)
	Find() ([]*model.Fee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fee, err error)
	FindInBatches(result *[]*model.Fee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Fee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFeeDo
	Assign(attrs ...field.AssignExpr) IFeeDo
	Joins(fields ...field.RelationField) IFeeDo
	Preload(fields ...field.RelationField) IFeeDo
	FirstOrInit() (*model.Fee, error)
	FirstOrCreate() (*model.Fee, error)
	FindByPage(offset int, limit int) (result []*model.Fee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f feeDo) Debug() IFeeDo {
	return f.withDO(f.DO.Debug())
}

func (f feeDo) WithContext(ctx context.Context) IFeeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feeDo) ReadDB() IFeeDo {
	return f.Clauses(dbresolver.Read)
}

func (f feeDo) WriteDB() IFeeDo {
	return f.Clauses(dbresolver.Write)
}

func (f feeDo) Session(config *gorm.Session) IFeeDo {
	return f.withDO(f.DO.Session(config))
}

func (f feeDo) Clauses(conds ...clause.Expression) IFeeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feeDo) Returning(value interface{}, columns ...string) IFeeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feeDo) Not(conds ...gen.Condition) IFeeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feeDo) Or(conds ...gen.Condition) IFeeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feeDo) Select(conds ...field.Expr) IFeeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feeDo) Where(conds ...gen.Condition) IFeeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feeDo) Order(conds ...field.Expr) IFeeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feeDo) Distinct(cols ...field.Expr) IFeeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feeDo) Omit(cols ...field.Expr) IFeeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feeDo) Join(table schema.Tabler, on ...field.Expr) IFeeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFeeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feeDo) RightJoin(table schema.Tabler, on ...field.Expr) IFeeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feeDo) Group(cols ...field.Expr) IFeeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feeDo) Having(conds ...gen.Condition) IFeeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feeDo) Limit(limit int) IFeeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feeDo) Offset(offset int) IFeeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFeeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feeDo) Unscoped() IFeeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feeDo) Create(values ...*model.Fee) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feeDo) CreateInBatches(values []*model.Fee, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feeDo) Save(values ...*model.Fee) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feeDo) First() (*model.Fee, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fee), nil
	}
}

func (f feeDo) Take() (*model.Fee, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fee), nil
	}
}

func (f feeDo) Last() (*model.Fee, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fee), nil
	}
}

func (f feeDo) Find() ([]*model.Fee, error) {
	result, err := f.DO.Find()
	return result.([]*model.Fee), err
}

func (f feeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fee, err error) {
	buf := make([]*model.Fee, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feeDo) FindInBatches(result *[]*model.Fee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feeDo) Attrs(attrs ...field.AssignExpr) IFeeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feeDo) Assign(attrs ...field.AssignExpr) IFeeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feeDo) Joins(fields ...field.RelationField) IFeeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feeDo) Preload(fields ...field.RelationField) IFeeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feeDo) FirstOrInit() (*model.Fee, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fee), nil
	}
}

func (f feeDo) FirstOrCreate() (*model.Fee, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fee), nil
	}
}

func (f feeDo) FindByPage(offset int, limit int) (result []*model.Fee, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feeDo) Delete(models ...*model.Fee) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feeDo) withDO(do gen.Dao) *feeDo {
	f.DO = *do.(*gen.DO)
	return f
}
