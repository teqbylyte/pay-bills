// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	model "martpay/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newKycLevel(db *gorm.DB, opts ...gen.DOOption) kycLevel {
	_kycLevel := kycLevel{}

	_kycLevel.kycLevelDo.UseDB(db, opts...)
	_kycLevel.kycLevelDo.UseModel(&model.KycLevel{})

	tableName := _kycLevel.kycLevelDo.TableName()
	_kycLevel.ALL = field.NewAsterisk(tableName)
	_kycLevel.ID = field.NewUint(tableName, "id")
	_kycLevel.CreatedAt = field.NewTime(tableName, "created_at")
	_kycLevel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_kycLevel.Name = field.NewString(tableName, "name")
	_kycLevel.DailyLimit = field.NewFloat64(tableName, "daily_limit")
	_kycLevel.SingleTransMax = field.NewFloat64(tableName, "single_trans_max")
	_kycLevel.MaxBalance = field.NewFloat64(tableName, "max_balance")

	_kycLevel.fillFieldMap()

	return _kycLevel
}

type kycLevel struct {
	kycLevelDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Name           field.String
	DailyLimit     field.Float64
	SingleTransMax field.Float64
	MaxBalance     field.Float64

	fieldMap map[string]field.Expr
}

func (k kycLevel) Table(newTableName string) *kycLevel {
	k.kycLevelDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kycLevel) As(alias string) *kycLevel {
	k.kycLevelDo.DO = *(k.kycLevelDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kycLevel) updateTableName(table string) *kycLevel {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewUint(table, "id")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")
	k.Name = field.NewString(table, "name")
	k.DailyLimit = field.NewFloat64(table, "daily_limit")
	k.SingleTransMax = field.NewFloat64(table, "single_trans_max")
	k.MaxBalance = field.NewFloat64(table, "max_balance")

	k.fillFieldMap()

	return k
}

func (k *kycLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kycLevel) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 7)
	k.fieldMap["id"] = k.ID
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
	k.fieldMap["name"] = k.Name
	k.fieldMap["daily_limit"] = k.DailyLimit
	k.fieldMap["single_trans_max"] = k.SingleTransMax
	k.fieldMap["max_balance"] = k.MaxBalance
}

func (k kycLevel) clone(db *gorm.DB) kycLevel {
	k.kycLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kycLevel) replaceDB(db *gorm.DB) kycLevel {
	k.kycLevelDo.ReplaceDB(db)
	return k
}

type kycLevelDo struct{ gen.DO }

type IKycLevelDo interface {
	gen.SubQuery
	Debug() IKycLevelDo
	WithContext(ctx context.Context) IKycLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKycLevelDo
	WriteDB() IKycLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKycLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKycLevelDo
	Not(conds ...gen.Condition) IKycLevelDo
	Or(conds ...gen.Condition) IKycLevelDo
	Select(conds ...field.Expr) IKycLevelDo
	Where(conds ...gen.Condition) IKycLevelDo
	Order(conds ...field.Expr) IKycLevelDo
	Distinct(cols ...field.Expr) IKycLevelDo
	Omit(cols ...field.Expr) IKycLevelDo
	Join(table schema.Tabler, on ...field.Expr) IKycLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKycLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKycLevelDo
	Group(cols ...field.Expr) IKycLevelDo
	Having(conds ...gen.Condition) IKycLevelDo
	Limit(limit int) IKycLevelDo
	Offset(offset int) IKycLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKycLevelDo
	Unscoped() IKycLevelDo
	Create(values ...*model.KycLevel) error
	CreateInBatches(values []*model.KycLevel, batchSize int) error
	Save(values ...*model.KycLevel) error
	First() (*model.KycLevel, error)
	Take() (*model.KycLevel, error)
	Last() (*model.KycLevel, error)
	Find() ([]*model.KycLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KycLevel, err error)
	FindInBatches(result *[]*model.KycLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.KycLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKycLevelDo
	Assign(attrs ...field.AssignExpr) IKycLevelDo
	Joins(fields ...field.RelationField) IKycLevelDo
	Preload(fields ...field.RelationField) IKycLevelDo
	FirstOrInit() (*model.KycLevel, error)
	FirstOrCreate() (*model.KycLevel, error)
	FindByPage(offset int, limit int) (result []*model.KycLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKycLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k kycLevelDo) Debug() IKycLevelDo {
	return k.withDO(k.DO.Debug())
}

func (k kycLevelDo) WithContext(ctx context.Context) IKycLevelDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kycLevelDo) ReadDB() IKycLevelDo {
	return k.Clauses(dbresolver.Read)
}

func (k kycLevelDo) WriteDB() IKycLevelDo {
	return k.Clauses(dbresolver.Write)
}

func (k kycLevelDo) Session(config *gorm.Session) IKycLevelDo {
	return k.withDO(k.DO.Session(config))
}

func (k kycLevelDo) Clauses(conds ...clause.Expression) IKycLevelDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kycLevelDo) Returning(value interface{}, columns ...string) IKycLevelDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kycLevelDo) Not(conds ...gen.Condition) IKycLevelDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kycLevelDo) Or(conds ...gen.Condition) IKycLevelDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kycLevelDo) Select(conds ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kycLevelDo) Where(conds ...gen.Condition) IKycLevelDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kycLevelDo) Order(conds ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kycLevelDo) Distinct(cols ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kycLevelDo) Omit(cols ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kycLevelDo) Join(table schema.Tabler, on ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kycLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kycLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kycLevelDo) Group(cols ...field.Expr) IKycLevelDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kycLevelDo) Having(conds ...gen.Condition) IKycLevelDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kycLevelDo) Limit(limit int) IKycLevelDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kycLevelDo) Offset(offset int) IKycLevelDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kycLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKycLevelDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kycLevelDo) Unscoped() IKycLevelDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kycLevelDo) Create(values ...*model.KycLevel) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kycLevelDo) CreateInBatches(values []*model.KycLevel, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kycLevelDo) Save(values ...*model.KycLevel) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kycLevelDo) First() (*model.KycLevel, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KycLevel), nil
	}
}

func (k kycLevelDo) Take() (*model.KycLevel, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KycLevel), nil
	}
}

func (k kycLevelDo) Last() (*model.KycLevel, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KycLevel), nil
	}
}

func (k kycLevelDo) Find() ([]*model.KycLevel, error) {
	result, err := k.DO.Find()
	return result.([]*model.KycLevel), err
}

func (k kycLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KycLevel, err error) {
	buf := make([]*model.KycLevel, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kycLevelDo) FindInBatches(result *[]*model.KycLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kycLevelDo) Attrs(attrs ...field.AssignExpr) IKycLevelDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kycLevelDo) Assign(attrs ...field.AssignExpr) IKycLevelDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kycLevelDo) Joins(fields ...field.RelationField) IKycLevelDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kycLevelDo) Preload(fields ...field.RelationField) IKycLevelDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kycLevelDo) FirstOrInit() (*model.KycLevel, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KycLevel), nil
	}
}

func (k kycLevelDo) FirstOrCreate() (*model.KycLevel, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KycLevel), nil
	}
}

func (k kycLevelDo) FindByPage(offset int, limit int) (result []*model.KycLevel, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kycLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kycLevelDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kycLevelDo) Delete(models ...*model.KycLevel) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kycLevelDo) withDO(do gen.Dao) *kycLevelDo {
	k.DO = *do.(*gen.DO)
	return k
}
