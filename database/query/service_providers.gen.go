// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"martpay/app/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newServiceProvider(db *gorm.DB, opts ...gen.DOOption) serviceProvider {
	_serviceProvider := serviceProvider{}

	_serviceProvider.serviceProviderDo.UseDB(db, opts...)
	_serviceProvider.serviceProviderDo.UseModel(&models.ServiceProvider{})

	tableName := _serviceProvider.serviceProviderDo.TableName()
	_serviceProvider.ALL = field.NewAsterisk(tableName)
	_serviceProvider.ID = field.NewUint(tableName, "id")
	_serviceProvider.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceProvider.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceProvider.ServiceId = field.NewUint(tableName, "service_id")
	_serviceProvider.Name = field.NewString(tableName, "name")

	_serviceProvider.fillFieldMap()

	return _serviceProvider
}

type serviceProvider struct {
	serviceProviderDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	ServiceId field.Uint
	Name      field.String

	fieldMap map[string]field.Expr
}

func (s serviceProvider) Table(newTableName string) *serviceProvider {
	s.serviceProviderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceProvider) As(alias string) *serviceProvider {
	s.serviceProviderDo.DO = *(s.serviceProviderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceProvider) updateTableName(table string) *serviceProvider {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.ServiceId = field.NewUint(table, "service_id")
	s.Name = field.NewString(table, "name")

	s.fillFieldMap()

	return s
}

func (s *serviceProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceProvider) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["service_id"] = s.ServiceId
	s.fieldMap["name"] = s.Name
}

func (s serviceProvider) clone(db *gorm.DB) serviceProvider {
	s.serviceProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceProvider) replaceDB(db *gorm.DB) serviceProvider {
	s.serviceProviderDo.ReplaceDB(db)
	return s
}

type serviceProviderDo struct{ gen.DO }

type IServiceProviderDo interface {
	gen.SubQuery
	Debug() IServiceProviderDo
	WithContext(ctx context.Context) IServiceProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceProviderDo
	WriteDB() IServiceProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceProviderDo
	Not(conds ...gen.Condition) IServiceProviderDo
	Or(conds ...gen.Condition) IServiceProviderDo
	Select(conds ...field.Expr) IServiceProviderDo
	Where(conds ...gen.Condition) IServiceProviderDo
	Order(conds ...field.Expr) IServiceProviderDo
	Distinct(cols ...field.Expr) IServiceProviderDo
	Omit(cols ...field.Expr) IServiceProviderDo
	Join(table schema.Tabler, on ...field.Expr) IServiceProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceProviderDo
	Group(cols ...field.Expr) IServiceProviderDo
	Having(conds ...gen.Condition) IServiceProviderDo
	Limit(limit int) IServiceProviderDo
	Offset(offset int) IServiceProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceProviderDo
	Unscoped() IServiceProviderDo
	Create(values ...*models.ServiceProvider) error
	CreateInBatches(values []*models.ServiceProvider, batchSize int) error
	Save(values ...*models.ServiceProvider) error
	First() (*models.ServiceProvider, error)
	Take() (*models.ServiceProvider, error)
	Last() (*models.ServiceProvider, error)
	Find() ([]*models.ServiceProvider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServiceProvider, err error)
	FindInBatches(result *[]*models.ServiceProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ServiceProvider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceProviderDo
	Assign(attrs ...field.AssignExpr) IServiceProviderDo
	Joins(fields ...field.RelationField) IServiceProviderDo
	Preload(fields ...field.RelationField) IServiceProviderDo
	FirstOrInit() (*models.ServiceProvider, error)
	FirstOrCreate() (*models.ServiceProvider, error)
	FindByPage(offset int, limit int) (result []*models.ServiceProvider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceProviderDo) Debug() IServiceProviderDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceProviderDo) WithContext(ctx context.Context) IServiceProviderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceProviderDo) ReadDB() IServiceProviderDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceProviderDo) WriteDB() IServiceProviderDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceProviderDo) Session(config *gorm.Session) IServiceProviderDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceProviderDo) Clauses(conds ...clause.Expression) IServiceProviderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceProviderDo) Returning(value interface{}, columns ...string) IServiceProviderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceProviderDo) Not(conds ...gen.Condition) IServiceProviderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceProviderDo) Or(conds ...gen.Condition) IServiceProviderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceProviderDo) Select(conds ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceProviderDo) Where(conds ...gen.Condition) IServiceProviderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceProviderDo) Order(conds ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceProviderDo) Distinct(cols ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceProviderDo) Omit(cols ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceProviderDo) Join(table schema.Tabler, on ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceProviderDo) Group(cols ...field.Expr) IServiceProviderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceProviderDo) Having(conds ...gen.Condition) IServiceProviderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceProviderDo) Limit(limit int) IServiceProviderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceProviderDo) Offset(offset int) IServiceProviderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceProviderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceProviderDo) Unscoped() IServiceProviderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceProviderDo) Create(values ...*models.ServiceProvider) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceProviderDo) CreateInBatches(values []*models.ServiceProvider, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceProviderDo) Save(values ...*models.ServiceProvider) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceProviderDo) First() (*models.ServiceProvider, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceProvider), nil
	}
}

func (s serviceProviderDo) Take() (*models.ServiceProvider, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceProvider), nil
	}
}

func (s serviceProviderDo) Last() (*models.ServiceProvider, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceProvider), nil
	}
}

func (s serviceProviderDo) Find() ([]*models.ServiceProvider, error) {
	result, err := s.DO.Find()
	return result.([]*models.ServiceProvider), err
}

func (s serviceProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServiceProvider, err error) {
	buf := make([]*models.ServiceProvider, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceProviderDo) FindInBatches(result *[]*models.ServiceProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceProviderDo) Attrs(attrs ...field.AssignExpr) IServiceProviderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceProviderDo) Assign(attrs ...field.AssignExpr) IServiceProviderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceProviderDo) Joins(fields ...field.RelationField) IServiceProviderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceProviderDo) Preload(fields ...field.RelationField) IServiceProviderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceProviderDo) FirstOrInit() (*models.ServiceProvider, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceProvider), nil
	}
}

func (s serviceProviderDo) FirstOrCreate() (*models.ServiceProvider, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceProvider), nil
	}
}

func (s serviceProviderDo) FindByPage(offset int, limit int) (result []*models.ServiceProvider, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceProviderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceProviderDo) Delete(models ...*models.ServiceProvider) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceProviderDo) withDO(do gen.Dao) *serviceProviderDo {
	s.DO = *do.(*gen.DO)
	return s
}
